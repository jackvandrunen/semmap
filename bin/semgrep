#!/usr/bin/env python3

import argparse
import logging
import os
import sys

import gensim


def load_model(root):
    return gensim.models.doc2vec.Doc2Vec.load(os.path.join(root, '.semcache'))


def search(model, query, topn=10):
    query = gensim.utils.simple_preprocess(query, deacc=True, max_len=20)
    try:
        vector = model[query[0]]
    except KeyError:
        vector = model.infer_vector(query)
    sims = model.docvecs.most_similar([vector], topn=topn)
    for path, score in sims:
        print(f'[{score:.2f}] {path}')


if __name__ == '__main__':
    logging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=logging.WARN)

    parser = argparse.ArgumentParser()
    parser.add_argument('query', help='text to search')
    parser.add_argument('-n', dest='count', required=False, type=int, default=10, help='number of results to return')
    args = parser.parse_args(sys.argv[1:])

    try:
        model = load_model('.')
        search(model, args.query, args.count)
    except FileNotFoundError:
        sys.stderr.write("semcache not initialized, run 'semcache build' to get started\n")
        sys.exit(-1)